/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.atlen.productshop.controller;

import com.atlen.productshop.exception.NotFoundException;
import com.atlen.productshop.model.Product;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;


@Validated
public interface ProductsApi {

    @Operation(summary = "Ajouter un nouveau produit", description = "Ajout d'un nouveau produit à notre magasin", tags={ "produit" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Succés de l'opération de création", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))),
        
        @ApiResponse(responseCode = "405", description = "Saisie invalide ou non conforme"),
        
        @ApiResponse(responseCode = "409", description = "Produit déjà existant") })
    @RequestMapping(value = "/products",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)

    ResponseEntity<Product> addProduct(@Parameter(in = ParameterIn.DEFAULT, description = "Créé un nouveau produit", required=true, schema=@Schema()) @Valid @RequestBody Product body) throws Exception;


    @Operation(summary = "Supprime un produit", description = "Permet de supprimer un produit de la base produit", tags={ "produit" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Le produit a été supprimé") })
    @RequestMapping(value = "/products/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProduct(@Parameter(in = ParameterIn.PATH, description = "identifiant du produit à supprimer", required=true, schema=@Schema()) @PathVariable("id") Long id);


    @Operation(summary = "Trouver un produit par son identifiant", description = "Retourne un seul produit", tags={ "produit" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Succés de l'opération de récupération de l'élément", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))),
        
        @ApiResponse(responseCode = "400", description = "Format identifiant invalid"),
        
        @ApiResponse(responseCode = "404", description = "Produit inexistant") })
    @RequestMapping(value = "/products/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Product> getProductById(@Parameter(in = ParameterIn.PATH, description = "Identifiant du produit", required=true, schema=@Schema()) @PathVariable("id") Long id) throws NotFoundException;


    @Operation(summary = "Récupère des produits", description = "Returns un liste de produits exitants", tags={ "produit" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Succés de l'opération récupération de la liste", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Product.class)))) })
    @RequestMapping(value = "/products",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Product>> getProducts();


    @Operation(summary = "Mise à jour du produit", description = "Permet de mettre à jour un produit si il existe", tags={ "produit" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Succés de l'opération de mise à jout de l'élément", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))),
        
        @ApiResponse(responseCode = "400", description = "Erreur de mise à jour"),
        
        @ApiResponse(responseCode = "405", description = "Saisie invalide ou non conforme") })
    @RequestMapping(value = "/products/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<Product> updateProduct(@Parameter(in = ParameterIn.DEFAULT, description = "Produit à mettre à jour", schema=@Schema()) @Valid @RequestBody Product body) throws Exception;

}

